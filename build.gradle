apply plugin: 'android'
apply plugin: 'maven'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

android {
    compileSdkVersion 17
    buildToolsVersion '17'

    defaultConfig {
        minSdkVersion 12
        targetSdkVersion 17
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            res.srcDirs = ['res']
        }

        instrumentTest.setRoot('tests')
    }
    signingConfigs {
        release
    }
    
    if (project.hasProperty('buildNumber')) defaultConfig.versionName += '-' + buildNumber
  
    if (project.hasProperty('storeFile')) {
        android.signingConfigs.release.storeFile = file(storeFile)
        android.signingConfigs.release.storePassword = storePassword
        android.signingConfigs.release.keyAlias = keyAlias
        android.signingConfigs.release.keyPassword = keyPassword
    } else {
        buildTypes.release.signingConfig = null
    }

    flavorGroups "target-app", "store"

    productFlavors {
        tablet {
            flavorGroup "target-app"
            packageName "com.mysms.android.tablet.theme.dark"
            versionName '1.5-SNAPSHOT'
            versionCode 7
        }

        mirror {
            flavorGroup "target-app"
            packageName "com.mysms.android.mirror.theme.dark"
            versionName '1.0-SNAPSHOT'
            versionCode 1
        }

        play { flavorGroup "store" }
        amazon { flavorGroup "store" }
    }

    dependencies {
        compile 'com.mysms.android:mysms-android-tablet-theme-base:1.2'
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        applicationVariants.each { variant ->
            def regex = "^.*(tablet|mirror)(play|amazon).*\$";
            def apk = variant.packageApplication.outputFile;
            def app = variant.baseName.replaceAll(regex, "\$1");
            def store = variant.baseName.replaceAll(regex, "\$2");

            def newName = "mysms-" + app + "-theme-dark-" + store + (apk.name.contains("-unaligned") ? "-unaligned" : "") + "-" + variant.mergedFlavor.versionName + ".apk";

            if (variant.zipAlign) {
                variant.packageApplication.outputFile = new File(apk.parentFile, newName);
                variant.zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
            } else {
                variant.packageApplication.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
            }
        }
    }
}
 
tasks.withType(Compile) {
    options.encoding = "UTF-8"
}
